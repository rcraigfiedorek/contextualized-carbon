

import dataclasses
from typing import Optional


@dataclasses.dataclass
class ZeroDimensionalFactTemplate:
    tco2_conversion: float
    message: str
    citation: Optional[dict] = None
    invert_input: bool = False

    def get_fact(self, tco2e: float) -> str:
        if self.invert_input:
            numerical_result = self.tco2_conversion / tco2e
        else:
            numerical_result = self.tco2_conversion * tco2e
        return self.message % (numerical_result)


TCRE_DEG_C_PER_EXAGRAM_CARBON = 1.65
CO2_MASS_PER_CARBON_MASS = 3.67
EXAGRAM_TO_TON = 1_000_000_000_000
TCRE_DEG_C_PER_TCO2 = (
    TCRE_DEG_C_PER_EXAGRAM_CARBON
    * CO2_MASS_PER_CARBON_MASS
    * EXAGRAM_TO_TON
)
tcre_fact = ZeroDimensionalFactTemplate(
    tco2_conversion=TCRE_DEG_C_PER_TCO2,
    message='This alone will raise the mean global temperature by %s Â°C.'
)

EMPIRE_STATE_BUILDING_MASS_TONS = 331_122
EMPIRE_STATE_BUILDINGS_PER_TON = 1 / EMPIRE_STATE_BUILDING_MASS_TONS
empire_state_fact = ZeroDimensionalFactTemplate(
    tco2_conversion=EMPIRE_STATE_BUILDING_MASS_TONS,
    message='This amount of carbon dioxide has the same weight as %s Empire State Buildings.'
)

TAYLOR_SWIFT_JET_TCO2_PER_MI = 0.35
EARTH_EQUATOR_DISTANCE_MI = 1000  # FIND THIS
SECONDS_PER_YEAR = 60 * 60 * 24 * 365
TAYLOR_CIRCUMNAVIGATIONS_PER_TCO2 = 1 / (
    TAYLOR_SWIFT_JET_TCO2_PER_MI
    * EARTH_EQUATOR_DISTANCE_MI
)
TAYLOR_YEARLY_CIRCUMNAVIGATIONS_PER_SECOND_PER_TCO2 = (
    TAYLOR_CIRCUMNAVIGATIONS_PER_TCO2
    / SECONDS_PER_YEAR
)
TAYLOR_YEARLY_CIRCUMNAVIGATION_PERIOD_SECONDS = 1 / (
    TAYLOR_YEARLY_CIRCUMNAVIGATIONS_PER_SECOND_PER_TCO2
)
taylor_jet_fact = ZeroDimensionalFactTemplate(
    tco2_conversion=TAYLOR_YEARLY_CIRCUMNAVIGATION_PERIOD_SECONDS,
    message=(
        'This is equal to the emissions that would generated by Taylor Swift flying her private jet around the '
        'equator once every %s seconds for an entire year.'
    ),
    invert_input=True
)

HUMMER_EMISSIONS_GRAM_CO2_PER_MI = 555
GRAMS_PER_TON = 1_000_000
MI_TRAVELED_AT_60MPH_PER_YEAR = 60 * 24 * 365
HUMMER_60MPH_FOR_YEAR_PER_TCO2 = (
    HUMMER_EMISSIONS_GRAM_CO2_PER_MI
    * MI_TRAVELED_AT_60MPH_PER_YEAR
    / GRAMS_PER_TON
)
hummer_fact = ZeroDimensionalFactTemplate(
    tco2_conversion=HUMMER_60MPH_FOR_YEAR_PER_TCO2,
    message='This is equal to the emissions generated from %s Hummer H3s driving at 60mph nonstop for an entire year.'
)

ARCTIC_SEA_ICE_MELT_METER_SQ_PER_TCO2 = 3
arctic_sea_ice_fact = ZeroDimensionalFactTemplate(
    tco2_conversion=ARCTIC_SEA_ICE_MELT_METER_SQ_PER_TCO2,
    message='This amount of carbon alone will cause the melting of %s meters squared of ice in the Arctic.'
)

FOREST_SEQUESTRATION_TCO2_PER_HECTARE_PER_YEAR = 11
AREA_FOREST_HECTARE_YEAR_PER_TCO2 = 1 / (
    FOREST_SEQUESTRATION_TCO2_PER_HECTARE_PER_YEAR
)
tropical_forest_fact = ZeroDimensionalFactTemplate(
    tco2_conversion=AREA_FOREST_HECTARE_YEAR_PER_TCO2,
    message='It would take %s hectares of tropical forest to absorb this amount of carbon per year from the atmosphere.'
)
