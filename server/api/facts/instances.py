

from api.facts.template import ZeroDimensionalFactTemplate

ALL_FACTS = list()

TCRE_DEG_C_PER_EXAGRAM_CARBON = 1.65
CO2_MASS_PER_CARBON_MASS = 3.67
EXAGRAM_TO_TON = 1_000_000_000_000
TCRE_DEG_C_PER_TCO2 = (
    TCRE_DEG_C_PER_EXAGRAM_CARBON
    * CO2_MASS_PER_CARBON_MASS
    * EXAGRAM_TO_TON
)
tcre_fact = ZeroDimensionalFactTemplate(
    tco2_conversion=TCRE_DEG_C_PER_TCO2,
    message='This alone will raise the mean global temperature by %s Â°C.'
)
ALL_FACTS.append(tcre_fact)

EMPIRE_STATE_BUILDING_MASS_TONS = 331_122
EMPIRE_STATE_BUILDINGS_PER_TON = 1 / EMPIRE_STATE_BUILDING_MASS_TONS
empire_state_fact = ZeroDimensionalFactTemplate(
    tco2_conversion=EMPIRE_STATE_BUILDING_MASS_TONS,
    message='This amount of carbon dioxide has the same weight as %s Empire State Buildings.'
)
ALL_FACTS.append(empire_state_fact)

TAYLOR_SWIFT_JET_TCO2_PER_MI = 0.35
EARTH_EQUATOR_DISTANCE_MI = 0  # TODO
SECONDS_PER_YEAR = 60 * 60 * 24 * 365
TAYLOR_CIRCUMNAVIGATIONS_PER_TCO2 = 1 / (
    TAYLOR_SWIFT_JET_TCO2_PER_MI
    * EARTH_EQUATOR_DISTANCE_MI
)
TAYLOR_YEARLY_CIRCUMNAVIGATIONS_PER_SECOND_PER_TCO2 = (
    TAYLOR_CIRCUMNAVIGATIONS_PER_TCO2
    / SECONDS_PER_YEAR
)
TAYLOR_YEARLY_CIRCUMNAVIGATION_PERIOD_SECONDS = 1 / (
    TAYLOR_YEARLY_CIRCUMNAVIGATIONS_PER_SECOND_PER_TCO2
)
taylor_jet_fact = ZeroDimensionalFactTemplate(
    tco2_conversion=TAYLOR_YEARLY_CIRCUMNAVIGATION_PERIOD_SECONDS,
    message=(
        'This is equal to the emissions that would generated by Taylor Swift flying her private jet around the '
        'equator once every %s seconds for an entire year.'
    ),
    invert_input=True
)
ALL_FACTS.append(taylor_jet_fact)

HUMMER_EMISSIONS_GRAM_CO2_PER_MI = 555
GRAMS_PER_TON = 1_000_000
MI_TRAVELED_AT_60MPH_PER_YEAR = 60 * 24 * 365
HUMMER_60MPH_FOR_YEAR_PER_TCO2 = (
    HUMMER_EMISSIONS_GRAM_CO2_PER_MI
    * MI_TRAVELED_AT_60MPH_PER_YEAR
    / GRAMS_PER_TON
)
hummer_fact = ZeroDimensionalFactTemplate(
    tco2_conversion=HUMMER_60MPH_FOR_YEAR_PER_TCO2,
    message='This is equal to the emissions generated from %s Hummer H3s driving at 60mph nonstop for an entire year.'
)
ALL_FACTS.append(hummer_fact)

ARCTIC_SEA_ICE_MELT_METER_SQ_PER_TCO2 = 3
arctic_sea_ice_fact = ZeroDimensionalFactTemplate(
    tco2_conversion=ARCTIC_SEA_ICE_MELT_METER_SQ_PER_TCO2,
    message='This amount of carbon alone will cause the melting of %s meters squared of ice in the Arctic.'
)
ALL_FACTS.append(arctic_sea_ice_fact)

TROPICAL_FOREST_SEQUESTRATION_TCO2_PER_HECTARE_PER_YEAR = 11
AREA_TROPICAL_FOREST_HECTARE_YEAR_PER_TCO2 = 1 / (
    TROPICAL_FOREST_SEQUESTRATION_TCO2_PER_HECTARE_PER_YEAR
)
tropical_forest_fact = ZeroDimensionalFactTemplate(
    tco2_conversion=AREA_TROPICAL_FOREST_HECTARE_YEAR_PER_TCO2,
    message='It would take %s hectares of tropical forest to absorb this amount of carbon per year from the atmosphere.'
)
ALL_FACTS.append(tropical_forest_fact)
# Do other forest types -- add language related to land use / forest planting

EARTH_AIR_COLUMN_DENSITY_KG_PER_CM_SQUARED = 1.03
CO2_TOXICITY_CONCENTRATION = .1
LETHAL_CO2_KG_PER_CM_SQUARED_AIR_COLUMN = (
    EARTH_AIR_COLUMN_DENSITY_KG_PER_CM_SQUARED
    * CO2_TOXICITY_CONCENTRATION
    / (1 - CO2_TOXICITY_CONCENTRATION)
)
CM_SQUARED_PER_M_SQUARED = 100 * 100
KG_PER_T = 1_000
AREA_AIR_COLUMN_POISONED_METERS_SQUARED_PER_TCO2 = 1 / (
    LETHAL_CO2_KG_PER_CM_SQUARED_AIR_COLUMN
    * CM_SQUARED_PER_M_SQUARED
    / KG_PER_T
)
poisoned_area_fact = ZeroDimensionalFactTemplate(
    tco2_conversion=AREA_AIR_COLUMN_POISONED_METERS_SQUARED_PER_TCO2,
    message=(
        'If a land area of %s square meters had its air column sealed '
        'from the rest of Earth\'s atmosphere, then releasing this amount '
        'of carbon dioxide inside that area would cause lethal carbon dioxide '
        'poisoning for all of its human inhabitants.'
    )
)
ALL_FACTS.append(poisoned_area_fact)

SODA_CO2_CONCENTRATION_GRAMS_PER_L = 7
GRAMS_PER_TON = 1_000_000
LITERS_SODA_EQUIVALENT_PER_TCO2 = (
    GRAMS_PER_TON
    / SODA_CO2_CONCENTRATION_GRAMS_PER_L
)
soda_fact = ZeroDimensionalFactTemplate(
    tco2_conversion=LITERS_SODA_EQUIVALENT_PER_TCO2,
    message='This amount of carbon dioxide could be used to make %s Liters of carbonated water.'
)
ALL_FACTS.append(soda_fact)

CCUS_GLOBAL_TCO2_PER_YEAR = 44_000_000
CCUS_GLOBAL_YEARS_PER_TCO2 = 1 / CCUS_GLOBAL_TCO2_PER_YEAR
ccus_fact = ZeroDimensionalFactTemplate(
    tco2_conversion=CCUS_GLOBAL_YEARS_PER_TCO2,
    message=(
        'Carbon Capture, Utilization, and Storage (CCUS) is often touted as a solution to carbon emissions reduction. '
        'Yet it would take %s years for the entire planet\'s CCUS operations to capture this amount of carbon.'
    )
)
ALL_FACTS.append(ccus_fact)

DAC_GLOBAL_TCO2_PER_YEAR = 10_000
DAC_GLOBAL_YEARS_PER_TCO2 = 1 / DAC_GLOBAL_TCO2_PER_YEAR
dac_fact = ZeroDimensionalFactTemplate(
    tco2_conversion=DAC_GLOBAL_YEARS_PER_TCO2,
    message=(
        'Direct Air Capture (DAC) is often touted as a solution to carbon emissions reduction. '
        'Yet it would take %s years for the entire planet\'s DAC operations to capture this amount of carbon.'
    )
)
ALL_FACTS.append(dac_fact)


CO2_DENSITY_KG_PER_M_CUBED = 1.815
KM_SQUARED_TIMES_CM_PER_M_CUBED = 1_000 * 1_000 * .001
KM_SQUARED_OF_CM_CARPET_PER_TCO2 = (
    KM_SQUARED_TIMES_CM_PER_M_CUBED
    * KG_PER_T
    / CO2_DENSITY_KG_PER_M_CUBED
)
carpet_fact = ZeroDimensionalFactTemplate(
    tco2_conversion=KM_SQUARED_OF_CM_CARPET_PER_TCO2,
    message=(
        'This is enough carbon dioxide to cover %s kilometers of land '
        'with a centimeter-high carpet of pure carbon dioxide.'
    )
)
ALL_FACTS.append(carpet_fact)
